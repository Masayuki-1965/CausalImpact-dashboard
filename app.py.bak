import streamlit as st
import pandas as pd
import os
import glob
import plotly.graph_objects as go
from plotly.subplots import make_subplots
import time
import numpy as np

# --- 初期化コード（最初に実行）---
if 'session_initialized' not in st.session_state:
    st.session_state['session_initialized'] = True
    st.session_state['data_loaded'] = False
    st.session_state['dataset_created'] = False
    st.session_state['params_saved'] = False
    st.session_state['analysis_completed'] = False
    # 分析期間のデフォルト値を格納する辞書を初期化
    st.session_state['period_defaults'] = {
        'pre_start': None,
        'pre_end': None,
        'post_start': None,
        'post_end': None
    }

# --- 画面幅を最大化 ---
st.set_page_config(layout="wide")

# --- カスタムCSS（全体の余白・フォント・配色・テイスト調整） ---
st.markdown("""
<style>
body, .main, .block-container {
    background-color: #f7fafd !important;
    font-family: 'Noto Sans JP', 'Meiryo', sans-serif;
}
.big-title {
    font-size: 3.5em;
    font-weight: 900;
    color: white;
    margin-bottom: 0.1em;
    letter-spacing: 0.04em;
    text-shadow: 0 2px 8px rgba(0, 0, 0, 0.2);
    line-height: 1.1;
    text-align: center;
}
.sub-title {
    font-size: 1.25em;
    color: white;
    margin-bottom: 1em;
    font-weight: 500;
    text-align: center;
}
.card {
    background: #fff;
    border-radius: 12px;
    padding: 1.3em 1.8em;
    margin-bottom: 1.4em;
    border: 1.5px solid #e3e8ee;
    box-shadow: 0 4px 16px rgba(0, 0, 0, 0.05);
}
.blue-header-card {
    background: linear-gradient(135deg, #1976d2 0%, #0d47a1 100%);
    border-radius: 12px;
    padding: 1.7em 2em;
    margin-bottom: 2em;
    border: none;
    box-shadow: 0 4px 20px rgba(25, 118, 210, 0.15);
    color: white;
    height: 170px;
    display: flex;
    flex-direction: column;
    justify-content: center;
}
.step-card {
    background: #e3f2fd;
    border-radius: 12px;
    padding: 1.2em 1.5em;
    margin-bottom: 1.5em;
    border: 1px solid rgba(25, 118, 210, 0.2);
    box-shadow: 0 2px 12px rgba(0, 0, 0, 0.03);
}
.section-title {
    font-size: 1.3em;
    font-weight: bold;
    color: #1976d2;
    margin-bottom: 0.8em;
    margin-top: 1em;
    border-left: 5px solid #1976d2;
    padding-left: 12px;
}
.stButton>button {
    background: linear-gradient(135deg, #1976d2 0%, #0d47a1 100%);
    color: #fff;
    font-weight: bold;
    font-size: 1.2em;
    border-radius: 8px;
    padding: 0.6em 2em;
    margin: 0.8em 0;
    box-shadow: 0 6px 15px rgba(25, 118, 210, 0.4);
    width: 100%;
    transition: all 0.2s ease;
}
.stButton>button:hover {
    background: linear-gradient(135deg, #1565c0 0%, #0d47a1 100%);
    box-shadow: 0 8px 20px rgba(25, 118, 210, 0.5);
    transform: translateY(-3px);
}
.stDataFrame, .stTable {
    font-size: 1.05em;
}
hr {
    border: none;
    border-top: 2px solid #e3e8ee;
    margin: 1.5em 0;
}
.sidebar-card {
    background: #fff;
    border-radius: 12px;
    padding: 1.3em 1.5em;
    margin-bottom: 1.4em;
    border: 1.5px solid #e3e8ee;
    box-shadow: 0 4px 16px rgba(0, 0, 0, 0.05);
}
.sidebar-title {
    font-size: 1.3em;
    font-weight: bold;
    color: #1976d2;
    margin-bottom: 0.6em;
    letter-spacing: 0.02em;
}
.sidebar-step {
    font-size: 1.1em;
    font-weight: bold;
    display: block;
    margin-bottom: 0.7em;
}
.sidebar-step-active {
    background: linear-gradient(135deg, #1976d2 0%, #0d47a1 100%);
    color: white;
    border-radius: 8px;
    padding: 0.5em 1.2em;
    margin-bottom: 0.7em;
    display: inline-block;
    box-shadow: 0 2px 8px rgba(25, 118, 210, 0.2);
    width: 100%;
    font-size: 1.15em;
    font-weight: 800;
}
.sidebar-step-inactive {
    background: #e3f2fd;
    color: #1565c0;
    border-radius: 8px;
    padding: 0.5em 1.2em;
    margin-bottom: 0.7em;
    display: inline-block;
    width: 100%;
    font-size: 1.15em;
    font-weight: bold;
}
.sidebar-faq-title {
    font-size: 1.15em;
    font-weight: bold;
    color: #1976d2;
    margin-bottom: 0.5em;
}
.sidebar-faq-body {
    background: #f4f8fd;
    border-radius: 8px;
    padding: 1.2em 1.3em;
    color: #333;
    font-size: 0.98em;
    line-height: 1.6;
}
.data-format-table {
    width: 100%;
    border-collapse: collapse;
    margin: 1em 0;
}
.data-format-table th, .data-format-table td {
    border: 1px solid #e0e0e0;
    padding: 8px 12px;
    text-align: left;
}
.data-format-table th {
    background-color: #f5f5f5;
    font-weight: bold;
}
.file-location {
    background: #e3f2fd;
    padding: 4px 10px;
    border-radius: 6px;
    color: #1565c0;
    font-weight: 500;
}
.expander-header {
    font-size: 1.15em;
    font-weight: bold;
    color: #1976d2;
}
div[data-testid="stExpander"] div[role="button"] p {
    font-size: 1.15em !important;
    font-weight: bold !important;
    color: #1976d2 !important;
}
.separator-line {
    border-top: 1px solid #e0e0e0;
    margin: 1.5em 0;
    width: 100%;
}
</style>
""", unsafe_allow_html=True)

# --- サイドバー ---
with st.sidebar:
    st.markdown('<div class="sidebar-title">分析フロー</div>', unsafe_allow_html=True)
    st.markdown('<div style="font-size:1em;color:#333;margin-bottom:1em;line-height:1.5;">Causal Impact分析は以下の<b>3つのステップ</b>で行います。各ステップのコンテンツはメイン画面に表示されます。</div>', unsafe_allow_html=True)
    
    # STEPのアクティブ状態を決定
    step1_active = True  # STEP 1は常に表示
    step2_active = False
    step3_active = False
    
    # データ読み込み済みならSTEP 2をアクティブに
    if st.session_state.get('data_loaded', False):
        if 'dataset_created' in st.session_state and st.session_state['dataset_created']:
            step2_active = True
    
    # 分析設定済みならSTEP 3をアクティブに
    if 'params_saved' in st.session_state and st.session_state['params_saved']:
        step3_active = True
        
    st.markdown(f"""
    <div style="margin-top:0.5em;">
        <div class="{'sidebar-step-active' if step1_active else 'sidebar-step-inactive'}">STEP 1：データ取り込み／可視化</div>
        <div class="{'sidebar-step-active' if step2_active else 'sidebar-step-inactive'}">STEP 2：分析期間／パラメータ設定</div>
        <div class="{'sidebar-step-active' if step3_active else 'sidebar-step-inactive'}">STEP 3：分析実行／結果確認</div>
    </div>
    <div class="separator-line"></div>
    """, unsafe_allow_html=True)

    with st.expander("Causal Impactとは？", expanded=False):
        st.markdown("""
<div class="sidebar-faq-body">
<b>Causal Impactは、介入（施策）の効果を測定するための統計手法です。</b><br><br>
介入前のデータから予測モデルを構築し、介入がなかった場合の予測値と実際の値を比較することで、介入の効果を推定します。
</div>
""", unsafe_allow_html=True)
    with st.expander("処置群と対照群について", expanded=False):
        st.markdown("""
<div class="sidebar-faq-body">
<b>処置群</b>は、施策（介入）の影響を受けたグループです。<br><br>
<b>対照群</b>は、施策の影響を受けていないグループであり、比較対象となります。
</div>
""", unsafe_allow_html=True)

# --- メインコンテンツ ---
st.markdown("""
<div class="blue-header-card">
    <div class="big-title">Causal Impact 分析</div>
    <div class="sub-title">施策効果を測定し、可視化するシンプルな分析ツール</div>
</div>
""", unsafe_allow_html=True)

st.markdown("""
<div class="step-card">
    <h2 style="font-size:1.8em;font-weight:bold;color:#1565c0;margin-bottom:0.5em;">STEP 1：データ取り込み／可視化</h2>
    <div style="color:#1976d2;font-size:1.1em;line-height:1.5;">このステップでは、分析に必要な時系列データを読み込み、可視化します。処置群（効果を測定したい対象）と対照群（比較対象）のデータをCSVファイルから取り込み、分析用データセットを作成します。</div>
</div>
""", unsafe_allow_html=True)

# --- データ形式ガイド ---
with st.expander("データ形式ガイド", expanded=False):
    st.markdown("""
<div class="section-title" style="margin-top:0;">CSVファイルの要件</div>
<div style="font-size:1.05em;line-height:1.6;margin-bottom:1.2em;">
CSVファイルには、<b>ymd（日付）</b> と <b>qty（数量）</b> の2つのカラムが必須です。
</div>

<div style="display:flex;gap:2.5em;margin-bottom:1.5em;">
<div style="flex:1;">
<div style="font-weight:bold;font-size:1.1em;margin-bottom:0.5em;color:#1976d2;">基本レイアウト</div>
<table class="data-format-table">
<tr><th>ymd</th><th>qty</th></tr>
<tr><td>20170403</td><td>29</td></tr>
<tr><td>20170425</td><td>24</td></tr>
<tr><td>20170426</td><td>23</td></tr>
<tr><td>20170523</td><td>24</td></tr>
<tr><td>20170524</td><td>26</td></tr>
<tr><td>20170529</td><td>21</td></tr>
<tr><td>...</td><td>...</td></tr>
</table>
</div>
<div style="flex:1;">
<div style="font-weight:bold;font-size:1.1em;margin-bottom:0.5em;color:#1976d2;">追加カラムがある場合の例</div>
<table class="data-format-table">
<tr><th>product_category</th><th>ymd</th><th>qty</th></tr>
<tr><td>ﾒｳ3</td><td>20170403</td><td>29</td></tr>
<tr><td>ﾒｳ3</td><td>20170425</td><td>24</td></tr>
<tr><td>ﾒｳ3</td><td>20170426</td><td>23</td></tr>
<tr><td>ﾒｳ3</td><td>20170523</td><td>24</td></tr>
<tr><td>ﾒｳ3</td><td>20170524</td><td>26</td></tr>
<tr><td>ﾒｳ3</td><td>20170529</td><td>21</td></tr>
<tr><td>...</td><td>...</td><td>...</td></tr>
</table>
</div>
</div>

<ul style="margin-top:1em;font-size:1.05em;line-height:1.6;">
<li><b>ymd：</b>日付（YYYYMMDD形式の8桁数字）</li>
<li><b>qty：</b>数量（整数または小数）</li>
</ul>
<p style="margin-top:0.5em;color:#555;">※ 上記以外のカラムは自由に追加できます。なくても問題ありません</p>

<div class="section-title">データファイルの保存場所</div>
<p style="margin-bottom:1em;font-size:1.05em;line-height:1.6;">処置群と対照群それぞれのCSVデータファイルを、以下の専用フォルダに保存してください。</p>

<div style="background:#f5f5f5;border-radius:10px;padding:1.2em;margin-bottom:1.5em;">
<div style="display:flex;margin-bottom:1em;">
<div style="width:180px;font-weight:bold;">処置群データ：</div>
<div class="file-location">data/treatment_data/</div>
</div>
<div style="display:flex;">
<div style="width:180px;font-weight:bold;">対照群データ：</div>
<div class="file-location">data/control_data/</div>
</div>
</div>

<ul style="font-size:1.05em;line-height:1.6;">
<li>CSVファイルの名称を製品名・品種名などに設定すると、処置群・対照群の名称として表示されます（日本語表記も可）</li>
<li>フォルダ内に複数のCSVファイルを保存しておくと、「データ選択」メニューから対象ファイルを選択できます</li>
</ul>
""", unsafe_allow_html=True)

# --- ファイル選択UI ---
st.markdown('<div class="section-title">分析対象ファイルの選択</div>', unsafe_allow_html=True)

treatment_dir = "data/treatment_data"
control_dir = "data/control_data"

def get_csv_files(directory):
    files = glob.glob(os.path.join(directory, "*.csv"))
    return [os.path.basename(f) for f in files]

treatment_files = get_csv_files(treatment_dir)
control_files = get_csv_files(control_dir)

col1, col2 = st.columns(2)
with col1:
    st.markdown('<div style="font-weight:bold;margin-bottom:0.5em;font-size:1.05em;">処置群ファイル</div>', unsafe_allow_html=True)
    treatment_file = st.selectbox("", treatment_files, key="treat", label_visibility="collapsed")
    selected_treat = f"選択：{treatment_file}（処置群）" if treatment_files else "処置群ファイルが見つかりません"
    st.markdown(f'<div style="color:#1976d2;font-size:0.9em;">{selected_treat}</div>', unsafe_allow_html=True)
with col2:
    st.markdown('<div style="font-weight:bold;margin-bottom:0.5em;font-size:1.05em;">対照群ファイル</div>', unsafe_allow_html=True)
    control_file = st.selectbox("", control_files, key="ctrl", label_visibility="collapsed")
    selected_ctrl = f"選択：{control_file}（対照群）" if control_files else "対照群ファイルが見つかりません"
    st.markdown(f'<div style="color:#1976d2;font-size:0.9em;">{selected_ctrl}</div>', unsafe_allow_html=True)

# --- データ読み込みボタン ---
st.markdown('<div style="margin-top:25px;"></div>', unsafe_allow_html=True)
read_btn = st.button("データを読み込む", key="read", help="選択したファイルを読み込みます。", type="primary", use_container_width=True)

# --- データ読み込み・クリーニング関数 ---
def load_and_clean_csv(path):
    # ymd, qtyだけ抽出（他カラムは無視）
    df = pd.read_csv(path, usecols=lambda c: c.strip() in ['ymd', 'qty'])
    df['ymd'] = df['ymd'].astype(str).str.zfill(8)
    df['ymd'] = pd.to_datetime(df['ymd'], format='%Y%m%d', errors='coerce')
    df = df.dropna(subset=['ymd'])
    return df

# --- ファイル選択後のデータ読み込み ---
if read_btn:
    treatment_path = os.path.join(treatment_dir, treatment_file)
    control_path = os.path.join(control_dir, control_file)
    df_treat = load_and_clean_csv(treatment_path)
    df_ctrl = load_and_clean_csv(control_path)
    treatment_name = os.path.splitext(treatment_file)[0]
    control_name = os.path.splitext(control_file)[0]
    # セッションに保存
    st.session_state['df_treat'] = df_treat
    st.session_state['df_ctrl'] = df_ctrl
    st.session_state['treatment_name'] = treatment_name
    st.session_state['control_name'] = control_name
    st.session_state['data_loaded'] = True
    st.success("データを読み込みました。下記にプレビューと統計情報を表示します。")

# --- データ読み込み済みなら表示（セッションから取得） ---
if st.session_state.get('data_loaded', False):
    df_treat = st.session_state['df_treat']
    df_ctrl = st.session_state['df_ctrl']
    treatment_name = st.session_state['treatment_name']
    control_name = st.session_state['control_name']
    # --- データプレビュー ---
    st.markdown('<div class="section-title">読み込みデータのプレビュー（上位10件）</div>', unsafe_allow_html=True)
    col1, col2 = st.columns(2)
    with col1:
        st.markdown(f'<div style="font-weight:bold;margin-bottom:0.5em;font-size:1.05em;">処置群（{treatment_name}）</div>', unsafe_allow_html=True)
        preview_df_treat = df_treat.head(10).copy()
        preview_df_treat.index = range(1, len(preview_df_treat) + 1)
        st.dataframe(preview_df_treat, use_container_width=True)
    with col2:
        st.markdown(f'<div style="font-weight:bold;margin-bottom:0.5em;font-size:1.05em;">対照群（{control_name}）</div>', unsafe_allow_html=True)
        preview_df_ctrl = df_ctrl.head(10).copy()
        preview_df_ctrl.index = range(1, len(preview_df_ctrl) + 1)
        st.dataframe(preview_df_ctrl, use_container_width=True)
    # --- 統計情報 ---
    st.markdown('<div class="section-title">データの統計情報</div>', unsafe_allow_html=True)
    col1, col2 = st.columns(2)
    def format_stats_with_japanese(df):
        stats = df.describe().reset_index()
        stats.columns = ['統計項目', '数値']
        stats['統計項目'] = stats['統計項目'].replace({
            'count': 'count（個数）',
            'mean': 'mean（平均）',
            'std': 'std（標準偏差）',
            'min': 'min（最小値）',
            '25%': '25%（第1四分位数）',
            '50%': '50%（中央値）',
            '75%': '75%（第3四分位数）',
            'max': 'max（最大値）'
        })
        for i, row in stats.iterrows():
            if row['統計項目'] != 'count（個数）':
                stats.at[i, '数値'] = round(row['数値'], 2)
        return stats
    with col1:
        st.markdown(f'<div style="font-weight:bold;margin-bottom:0.5em;font-size:1.05em;">処置群（{treatment_name}）</div>', unsafe_allow_html=True)
        if 'qty' in df_treat.columns:
            stats_treat = format_stats_with_japanese(df_treat[['qty']])
            st.dataframe(stats_treat, use_container_width=True, hide_index=True)
        else:
            st.error("データに 'qty' カラムが見つかりません")
    with col2:
        st.markdown(f'<div style="font-weight:bold;margin-bottom:0.5em;font-size:1.05em;">対照群（{control_name}）</div>', unsafe_allow_html=True)
        if 'qty' in df_ctrl.columns:
            stats_ctrl = format_stats_with_japanese(df_ctrl[['qty']])
            st.dataframe(stats_ctrl, use_container_width=True, hide_index=True)
        else:
            st.error("データに 'qty' カラムが見つかりません")
    # --- 分析用データセット作成セクション ---
    st.markdown('<div class="section-title">分析用データセットの作成</div>', unsafe_allow_html=True)
    st.markdown('<div style="font-weight:bold;margin-bottom:0.5em;font-size:1.05em;">分析データ集計方法の選択</div>', unsafe_allow_html=True)

    col1, col2 = st.columns([1, 3])
    with col1:
        freq_option = st.radio(
            "データ集計方法",
            options=["月次", "旬次"],
            label_visibility="collapsed"
        )
    with col2:
        if freq_option == "月次":
            st.markdown("""
<div style="font-size:0.98em;margin-top:0.1em;padding-left:0;">
<span style="font-weight:bold;">月次集計：</span>月単位で集計し、日付はその月の1日になります<br>
<span style="font-weight:normal;color:#666;">旬次集計：</span>月を上旬・中旬・下旬に3分割して集計し、日付はそれぞれ1日（上旬）、11日（中旬）、21日（下旬）になります<br>
　　　　　※欠損値は自動的に0で埋められます。
</div>
            """, unsafe_allow_html=True)
        else:
            st.markdown("""
<div style="font-size:0.98em;margin-top:0.1em;padding-left:0;">
<span style="font-weight:normal;color:#666;">月次集計：</span>月単位で集計し、日付はその月の1日になります<br>
<span style="font-weight:bold;">旬次集計：</span>月を上旬・中旬・下旬に3分割して集計し、日付はそれぞれ1日（上旬）、11日（中旬）、21日（下旬）になります<br>
　　　　　※欠損値は自動的に0で埋められます。
</div>
            """, unsafe_allow_html=True)
    
    # 「データセットを作成する」ボタンの上に余白を追加
    st.markdown('<div style="margin-top:25px;"></div>', unsafe_allow_html=True)
    create_btn = st.button("データセットを作成する", key="create", help="Causal Impact分析用データセットを作成します。", type="primary", use_container_width=True)
    
    if create_btn or ('dataset_created' in st.session_state and st.session_state['dataset_created']):
        if create_btn:  # 新しくデータセットを作成する場合のみ実行
            def make_period_key(dt, freq):
                if freq == "月次":
                    return dt.strftime('%Y-%m-01')
                elif freq == "旬次":
                    day = dt.day
                    if day <= 10:
                        return dt.strftime('%Y-%m-01')
                    elif day <= 20:
                        return dt.strftime('%Y-%m-11')
                    else:
                        return dt.strftime('%Y-%m-21')
                else:
                    return dt.strftime('%Y-%m-%d')
            def aggregate_df(df, freq):
                df = df.copy()
                df['period'] = df['ymd'].apply(lambda x: make_period_key(x, freq))
                agg = df.groupby('period', as_index=False)['qty'].sum()
                agg['period'] = pd.to_datetime(agg['period'])
                return agg
            def make_full_period_index(df1, df2, freq):
                idx1 = set(df1['period'])
                idx2 = set(df2['period'])
                common_idx = sorted(list(idx1 & idx2))
                return pd.to_datetime(common_idx)
                
            agg_treat = aggregate_df(df_treat, freq_option)
            agg_ctrl = aggregate_df(df_ctrl, freq_option)
            common_periods = make_full_period_index(agg_treat, agg_ctrl, freq_option)
            agg_treat = agg_treat[agg_treat['period'].isin(common_periods)].set_index('period')
            agg_ctrl = agg_ctrl[agg_ctrl['period'].isin(common_periods)].set_index('period')
            all_periods = pd.DataFrame(index=common_periods)
            agg_treat = all_periods.join(agg_treat).fillna(0)
            agg_ctrl = all_periods.join(agg_ctrl).fillna(0)
            dataset = pd.DataFrame({
                'ymd': common_periods,
                f'処置群（{treatment_name}）': agg_treat['qty'].values,
                f'対照群（{control_name}）': agg_ctrl['qty'].values
            })
            
            # セッションに保存
            st.session_state['dataset'] = dataset
            st.session_state['dataset_created'] = True
            
            # 分析期間のデフォルト値を設定
            dataset_min_date = dataset['ymd'].min().date()
            dataset_max_date = dataset['ymd'].max().date()
            
            # データセットの前半部分を介入前期間、後半部分を介入期間としてデフォルト設定
            mid_point_idx = len(dataset) // 2
            default_pre_end = dataset.iloc[mid_point_idx-1]['ymd'].date()
            default_post_start = dataset.iloc[mid_point_idx]['ymd'].date()
            
            st.session_state['period_defaults'] = {
                'pre_start': dataset_min_date,
                'pre_end': default_pre_end,
                'post_start': default_post_start,
                'post_end': dataset_max_date
            }
        else:
            # データセットが既に作成済みの場合、セッションから取得
            dataset = st.session_state['dataset']
        
        # データセット情報の表示（新規作成・既存問わず）
        st.markdown(f"""
<div style="margin-bottom:1.5em;">
<div style="font-weight:bold;margin-bottom:0.5em;font-size:1.05em;">対象期間：</div>
<div>{dataset['ymd'].min().strftime('%Y/%m/%d')} ～ {dataset['ymd'].max().strftime('%Y/%m/%d')}</div>
<div style="font-weight:bold;margin-bottom:0.5em;margin-top:1em;font-size:1.05em;">データ数：</div>
<div>{len(dataset)} 件</div>
</div>
        """, unsafe_allow_html=True)
        col1, col2 = st.columns(2)
        with col1:
            st.markdown('<div style="font-weight:bold;margin-bottom:0.5em;font-size:1.05em;">データプレビュー（上位10件表示）</div>', unsafe_allow_html=True)
            preview_df = dataset.head(10).copy()
            preview_df['ymd'] = preview_df['ymd'].dt.strftime('%Y-%m-%d')
            preview_df.index = range(1, len(preview_df) + 1)
            st.dataframe(preview_df, use_container_width=True)
        with col2:
            st.markdown('<div style="font-weight:bold;margin-bottom:0.5em;font-size:1.05em;">統計情報</div>', unsafe_allow_html=True)
            treatment_col = f'処置群（{treatment_name}）'
            control_col = f'対照群（{control_name}）'
            stats_df = pd.DataFrame({
                '統計項目': ['count（個数）', 'mean（平均）', 'std（標準偏差）', 'min（最小値）', '25%（第1四分位数）', '50%（中央値）', '75%（第3四分位数）', 'max（最大値）'],
                treatment_col: [len(dataset), round(dataset[treatment_col].mean(),2), round(dataset[treatment_col].std(),2), dataset[treatment_col].min(), dataset[treatment_col].quantile(0.25), dataset[treatment_col].quantile(0.5), dataset[treatment_col].quantile(0.75), dataset[treatment_col].max()],
                control_col: [len(dataset), round(dataset[control_col].mean(),2), round(dataset[control_col].std(),2), dataset[control_col].min(), dataset[control_col].quantile(0.25), dataset[control_col].quantile(0.5), dataset[control_col].quantile(0.75), dataset[control_col].max()]
            })
            st.dataframe(stats_df, use_container_width=True, hide_index=True)
        st.markdown('<div class="section-title">時系列プロット</div>', unsafe_allow_html=True)
        st.markdown('<div style="font-weight:bold;margin-bottom:0.5em;font-size:1.05em;">処置群と対照群の時系列推移</div>', unsafe_allow_html=True)
        
        # プロットの作成を明示的に行う
        fig = make_subplots(specs=[[{"secondary_y": True}]])
        
        # 処置群のトレース追加
        fig.add_trace(
            go.Scatter(
                x=dataset['ymd'], 
                y=dataset[treatment_col], 
                name=f"処置群（{treatment_name}）", 
                line=dict(color="#1976d2", width=2), 
                mode='lines', 
                hovertemplate='日付: %{x|%Y-%m-%d}<br>数量: %{y}<extra></extra>'
            ),
            secondary_y=False
        )
        
        # 対照群のトレース追加
        fig.add_trace(
            go.Scatter(
                x=dataset['ymd'], 
                y=dataset[control_col], 
                name=f"対照群（{control_name}）", 
                line=dict(color="#ef5350", width=2), 
                mode='lines', 
                hovertemplate='日付: %{x|%Y-%m-%d}<br>数量: %{y}<extra></extra>'
            ),
            secondary_y=True
        )
        
        # X軸の設定
        fig.update_xaxes(
            title_text="日付", 
            type="date", 
            tickformat="%Y-%m", 
            showgrid=True, 
            tickangle=-30
        )
        
        # 左Y軸の設定（処置群）
        fig.update_yaxes(
            title_text="処置群の数量", 
            secondary_y=False, 
            title_font=dict(color="#1976d2"), 
            tickfont=dict(color="#1976d2")
        )
        
        # 右Y軸の設定（対照群）
        fig.update_yaxes(
            title_text="対照群の数量", 
            secondary_y=True, 
            title_font=dict(color="#ef5350"), 
            tickfont=dict(color="#ef5350")
        )
        
        # レイアウト設定
        fig.update_layout(
            legend=dict(orientation="h", yanchor="bottom", y=1.02, xanchor="center", x=0.5),
            hovermode="x unified",
            plot_bgcolor='white',
            margin=dict(t=50, l=60, r=60, b=60),
            height=500,
            autosize=True,
            xaxis_rangeslider_visible=True,
            dragmode="zoom"
        )
        
        # プロット表示
        st.plotly_chart(fig, use_container_width=True)
        with st.expander("Plotlyインタラクティブグラフの使い方ガイド"):
            st.markdown("""
<div style="line-height:1.7;">
<ul>
<li><b>データ確認</b>：グラフ上の線やポイントにマウスを置くと、詳細値がポップアップ表示されます</li>
<li><b>拡大表示</b>：見たい期間をドラッグして範囲選択すると拡大表示されます</li>
<li><b>表示移動</b>：拡大後、右クリックドラッグで表示位置を調整できます</li>
<li><b>初期表示</b>：ダブルクリックすると全期間表示に戻ります</li>
<li><b>系列表示切替</b>：凡例をクリックすると系列の表示/非表示を切り替えできます</li>
</ul>
</div>
            """, unsafe_allow_html=True)
        with st.expander("分析期間設定のヒント"):
            st.markdown("""
<div style="line-height:1.7;">
<ul>
  <li><b>介入期間</b>：処置群（青線）において、施策（介入）実施後の効果を測定したい期間を設定してください</li>
  <li><b>介入前期間</b>：施策（介入）実施前の期間として、十分な長さのデータを含めて設定してください
    <ul>
      <li><b>季節性</b>：介入前期間に季節性がある場合は、少なくとも2〜3周期分のデータを含めるのが望ましいです</li>
      <li><b>イレギュラー要因</b>：外部要因による大きな影響がある期間は、介入前期間に含めないことをおすすめします</li>
    </ul>
  </li>
</ul>
</div>
            """, unsafe_allow_html=True)
        st.markdown("""
<div style="background:#e8f5e9;border-radius:10px;padding:1em;margin-top:2em;margin-bottom:1em;">
<div style="display:flex;align-items:center;">
<span style="font-size:1.6em;margin-right:0.5em;">✓</span>
<span style="color:#2e7d32;font-weight:bold;font-size:1.2em;">データセットの作成が完了しました。分析設定を行いましょう。</span>
</div>
</div>
        """, unsafe_allow_html=True)
        
        # --- STEP 2: 分析期間／パラメータ設定 ---
        # データセット作成完了後のみSTEP 2を表示
        if 'dataset_created' in st.session_state and st.session_state['dataset_created']:
            dataset = st.session_state['dataset']  # セッションから取得
            
            st.markdown("""
<div class="step-card">
    <h2 style="font-size:1.8em;font-weight:bold;color:#1565c0;margin-bottom:0.5em;">STEP 2：分析期間／パラメータ設定</h2>
    <div style="color:#1976d2;font-size:1.1em;line-height:1.5;">このステップでは、Causal Impact分析を実行するための期間設定とパラメータ設定を行います。介入前後の期間を指定し、分析モデルの各種パラメータを設定します。</div>
</div>
            """, unsafe_allow_html=True)
            
            # --- 分析期間設定 ---
            st.markdown('<div class="section-title">分析期間の設定</div>', unsafe_allow_html=True)
            
            # 期間の説明文を改善し、デフォルト値について説明を追加
            st.markdown("""
<div style="margin-bottom:1.5em;line-height:1.6;">
<p>施策（介入）実施前後の期間を設定します。<b>デフォルト値は以下の基準で設定されています：</b></p>
<ul style="margin-top:0.8em;">
  <li><b>介入前期間の開始日</b>：データセットの最初の日付</li>
  <li><b>介入前期間の終了日</b>：データセットの中間点（データ全体の前半部分）</li>
  <li><b>介入期間の開始日</b>：介入前期間の終了日の翌日（データセットの後半部分の最初の日付）</li>
  <li><b>介入期間の終了日</b>：データセットの最後の日付</li>
</ul>
<p style="margin-top:0.8em;">必要に応じて各項目を調整してください。<b>介入前期間の終了日</b>を変更すると、自動的に<b>介入期間の開始日</b>も調整されます。</p>
</div>
            """, unsafe_allow_html=True)
            
            # データセットから日付範囲を取得
            dataset_min_date = dataset['ymd'].min().date()
            dataset_max_date = dataset['ymd'].max().date()
            
            # 介入前期間と介入期間の設定UI
            col1, col2 = st.columns(2)
            
            # 介入前期間の終了日が変更されたときに介入期間の開始日を更新する関数
            def update_post_start():
                if 'pre_end' in st.session_state:
                    pre_end_date = st.session_state['pre_end']
                    # pre_endが有効な日付である場合のみpost_startを更新
                    if pre_end_date is not None:
                        # 翌日を計算（datetime.dateオブジェクトなので日数を直接加算）
                        next_day = pre_end_date + pd.Timedelta(days=1)
                        # 次の日がデータセットの範囲内かチェック
                        if next_day <= dataset_max_date:
                            st.session_state['post_start'] = next_day
            
            with col1:
                st.markdown('<div style="font-weight:bold;margin-bottom:0.5em;font-size:1.05em;">①介入前期間（Pre-Period）</div>', unsafe_allow_html=True)
                
                # ヘルプテキスト
                pre_start_help = "介入前期間の開始日を設定します。デフォルトはデータの最初の日付です。"
                pre_end_help = "介入前期間の終了日を設定します。この日付を変更すると、介入期間の開始日が自動で翌日に設定されます。"
                
                # 介入前期間の開始日
                pre_start = st.date_input(
                    "開始日", 
                    value=st.session_state['period_defaults']['pre_start'],
                    min_value=dataset_min_date, 
                    max_value=dataset_max_date, 
                    key="pre_start",
                    help=pre_start_help
                )
                
                # 介入前期間の終了日（変更時に介入期間の開始日を連動させる）
                pre_end = st.date_input(
                    "終了日", 
                    value=st.session_state['period_defaults']['pre_end'],
                    min_value=dataset_min_date, 
                    max_value=dataset_max_date, 
                    key="pre_end",
                    on_change=update_post_start,
                    help=pre_end_help
                )
            
            with col2:
                st.markdown('<div style="font-weight:bold;margin-bottom:0.5em;font-size:1.05em;">②介入期間（Post-Period）</div>', unsafe_allow_html=True)
                
                # ヘルプテキスト
                post_start_help = "介入期間の開始日です。デフォルトは介入前期間終了日の翌日ですが、手動で調整できます。"
                post_end_help = "介入期間の終了日を設定します。デフォルトはデータの最後の日付です。"
                
                # 介入期間の開始日
                post_start = st.date_input(
                    "開始日", 
                    value=st.session_state['period_defaults']['post_start'], 
                    min_value=dataset_min_date, 
                    max_value=dataset_max_date, 
                    key="post_start",
                    help=post_start_help
                )
                
                # 介入期間の終了日
                post_end = st.date_input(
                    "終了日", 
                    value=st.session_state['period_defaults']['post_end'], 
                    min_value=dataset_min_date, 
                    max_value=dataset_max_date, 
                    key="post_end",
                    help=post_end_help
                )
            
            # 日付の検証
            date_error = False
            date_warnings = []
            
            # 基本的なエラーチェック
            if pre_start and pre_end and pre_start > pre_end:
                st.error("①介入前期間の開始日は終了日より前である必要があります。")
                date_error = True

            if post_start and post_end and post_start > post_end:
                st.error("②介入期間の開始日は終了日より前である必要があります。")
                date_error = True

            if pre_end and post_start and pre_end >= post_start:
                st.error("①介入前期間の終了日は②介入期間の開始日より前である必要があります。")
                date_error = True

            # 期間の適切さに関する警告（エラーではない）
            min_pre_days = 14  # 最低2週間
            if pre_start and pre_end and (pre_end - pre_start).days < min_pre_days:
                date_warnings.append(f"介入前期間が{min_pre_days}日より短いです。予測精度を高めるため、十分な長さの介入前データを使用することをお勧めします。")

            min_post_days = 7  # 最低1週間
            if post_start and post_end and (post_end - post_start).days < min_post_days:
                date_warnings.append(f"介入期間が{min_post_days}日より短いです。効果を適切に測定するため、十分な長さの介入後データを使用することをお勧めします。")

            # 警告表示
            for warning in date_warnings:
                st.warning(warning)
            
            # --- パラメータ設定 ---
            st.markdown('<div class="section-title">パラメータ設定</div>', unsafe_allow_html=True)
            
            with st.expander("基本パラメータ", expanded=True):
                alpha = st.slider("信頼区間（1 - alpha）", min_value=0.01, max_value=0.20, value=0.05, step=0.01, format="%.2f", 
                                 help="信頼区間の幅を決める値です。デフォルトは0.05で、95%信頼区間を意味します。")
                
                st.markdown('<div style="font-weight:bold;margin-top:1em;margin-bottom:0.5em;font-size:1.05em;">季節性の設定</div>', unsafe_allow_html=True)
                has_season = st.checkbox("季節性を考慮する", value=True, help="時系列データに季節性（週次・月次など周期的なパターン）がある場合はチェックしてください。")
                
                if has_season:
                    season_col1, season_col2 = st.columns(2)
                    with season_col1:
                        nseasons = st.number_input("季節性の周期（日数）", min_value=1, max_value=365, value=7, step=1, 
                                                  help="季節性の周期を日数で指定します。週次なら7、月次なら30など。")
                    with season_col2:
                        season_duration = st.number_input("季節の長さ", min_value=1, value=1, step=1, 
                                                        help="各季節の長さを指定します。通常は1で問題ありません。")
            
            with st.expander("カスタム設定（上級者向け）", expanded=False):
                st.markdown("""
                <div style="font-size:0.9em;color:#666;margin-bottom:1em;">
                以下の設定は、特別な理由がない限りデフォルト値のままで問題ありません。Causal Impactの動作に詳しい上級者向けの設定です。
                </div>
                """, unsafe_allow_html=True)
                
                st.markdown('<div style="font-weight:bold;margin-bottom:0.5em;font-size:1.05em;">モデルパラメータ</div>', unsafe_allow_html=True)
                
                prior_level_sd = st.slider("Prior Level SD", min_value=0.001, max_value=0.5, value=0.01, step=0.001, format="%.3f",
                                          help="局所レベルのランダムウォークの事前標準偏差。データが安定している場合は小さい値、変動が大きい場合は大きい値を設定します。")
                
                standardize = st.checkbox("データの標準化", value=True, 
                                        help="データを標準化して分析を行うかどうか。標準化することで線形変換に対して結果が不変になります。")
                
                dynamic_regression = st.checkbox("動的回帰", value=False, 
                                               help="時変回帰係数を含めるかどうか。介入前後で共変量と結果変数の関係が変わる可能性がある場合はチェックしてください。")
                
                st.markdown('<div style="font-weight:bold;margin-top:1em;margin-bottom:0.5em;font-size:1.05em;">MCMCサンプリング設定</div>', unsafe_allow_html=True)
                
                mcmc_col1, mcmc_col2 = st.columns(2)
                with mcmc_col1:
                    niter = st.number_input("イテレーション数", min_value=100, max_value=10000, value=1000, step=100,
                                           help="MCMCサンプリングのイテレーション数。多いほど精度が上がりますが、計算時間も増加します。")
                with mcmc_col2:
                    nburn = st.number_input("バーンイン期間", min_value=10, max_value=2000, value=100, step=10,
                                          help="初期のサンプルを破棄する数。通常はイテレーション数の10%程度で設定します。")
            
            # --- 設定確認と次のステップへのボタン ---
            st.markdown('<div style="margin-top:2em;"></div>', unsafe_allow_html=True)
            
            # 設定内容のまとめを表示
            st.markdown("""
<div style="background:#f5f5f5;border-radius:10px;padding:1em;margin-bottom:1.5em;">
<div style="font-weight:bold;font-size:1.1em;margin-bottom:0.5em;color:#333;">現在の分析設定内容</div>
<ul style="list-style-type:none;padding-left:0;margin-bottom:0;">
""", unsafe_allow_html=True)

            # 期間設定の表示
            st.markdown(f"""
<li><span style="font-weight:bold;color:#555;">介入前期間：</span>{pre_start.strftime('%Y年%m月%d日')} 〜 {pre_end.strftime('%Y年%m月%d日')}</li>
<li><span style="font-weight:bold;color:#555;">介入期間：</span>{post_start.strftime('%Y年%m月%d日')} 〜 {post_end.strftime('%Y年%m月%d日')}</li>
<li><span style="font-weight:bold;color:#555;">信頼区間：</span>{int((1-alpha)*100)}%</li>
<li><span style="font-weight:bold;color:#555;">季節性：</span>{'あり（周期：' + str(nseasons) + '日）' if has_season else 'なし'}</li>
""", unsafe_allow_html=True)

            st.markdown("""
</ul>
</div>
            """, unsafe_allow_html=True)

            # モデルパラメータをセッションに保存
            model_params = {
                "pre_period": [pre_start, pre_end],
                "post_period": [post_start, post_end],
                "alpha": alpha,
                "nseasons": nseasons if has_season else 1,
                "season_duration": season_duration if has_season else 1,
                "prior_level_sd": prior_level_sd,
                "standardize_data": standardize,
                "dynamic_regression": dynamic_regression,
                "niter": niter,
                "nburn": nburn
            }

            # 「分析設定を確定する」ボタン
            save_params_btn = st.button(
                "分析設定を確定する",
                key="save_params",
                type="primary",
                disabled=date_error,
                use_container_width=True
            )

            if save_params_btn and not date_error:
                # 設定をセッションに保存
                st.session_state['model_params'] = model_params
                st.session_state['params_saved'] = True
                
                # 成功メッセージと次のステップへの案内
                st.success("分析設定を保存しました。下記のSTEP 3セクションで分析を実行できます。")
            
            # --- STEP 3: 分析実行／結果確認 ---
            # パラメータ設定が完了した場合のみSTEP 3を表示
            if 'params_saved' in st.session_state and st.session_state['params_saved']:
                # STEP 2と3の間に視覚的な区切りを入れる
                st.markdown('<div style="border-top: 1px solid #e0e0e0; margin: 2em 0;"></div>', unsafe_allow_html=True)
                
                st.markdown("""
<div class="step-card">
    <h2 style="font-size:1.8em;font-weight:bold;color:#1565c0;margin-bottom:0.5em;">STEP 3：分析実行／結果確認</h2>
    <div style="color:#1976d2;font-size:1.1em;line-height:1.5;">このステップでは、Causal Impact分析を実行し、結果を確認します。「分析実行」ボタンをクリックすると、設定されたパラメータに基づいて分析が開始されます。</div>
</div>
                """, unsafe_allow_html=True)
                
                st.markdown('<div class="section-title">分析実行</div>', unsafe_allow_html=True)
                
                # セッションから保存されたパラメータを取得
                params = st.session_state['model_params']
                
                # 現在の設定内容の表示
                st.markdown("""
<div style="background:#f5f5f5;border-radius:10px;padding:1.2em;margin-bottom:1.5em;">
<div style="font-weight:bold;font-size:1.1em;margin-bottom:0.5em;color:#333;">現在の分析設定内容</div>
<ul style="list-style-type:none;padding-left:0;margin-bottom:0;">
    """, unsafe_allow_html=True)

                st.markdown(f"""
<li><span style="font-weight:bold;color:#555;">介入前期間：</span>{params['pre_period'][0].strftime('%Y年%m月%d日')} 〜 {params['pre_period'][1].strftime('%Y年%m月%d日')}</li>
<li><span style="font-weight:bold;color:#555;">介入期間：</span>{params['post_period'][0].strftime('%Y年%m月%d日')} 〜 {params['post_period'][1].strftime('%Y年%m月%d日')}</li>
<li><span style="font-weight:bold;color:#555;">信頼区間：</span>{int((1-params['alpha'])*100)}%</li>
<li><span style="font-weight:bold;color:#555;">季節性：</span>{'あり（周期：' + str(params['nseasons']) + '日）' if params['nseasons'] > 1 else 'なし'}</li>
                """, unsafe_allow_html=True)

                st.markdown("""
</ul>
</div>
                """, unsafe_allow_html=True)
                
                # 分析実行ボタン
                run_analysis_btn = st.button(
                    "分析を実行する", 
                    key="run_analysis", 
                    type="primary", 
                    use_container_width=True
                )
                
                if run_analysis_btn:
                    with st.spinner('分析実行中... しばらくお待ちください。'):
                        # ここでCausal Impact分析を実行する
                        # 本番実装では、causal_impact_test.pyのようなスクリプトをベースに
                        # 実際のデータとパラメータで分析を実行する
                        
                        # 分析実行中を示すプログレスバー（デモ用）
                        progress_bar = st.progress(0)
                        for i in range(100):
                            time.sleep(0.05)  # 実際の分析では不要
                            progress_bar.progress(i + 1)
                        
                        # 分析結果をセッションに保存（ダミーデータ）
                        st.session_state['analysis_completed'] = True
                    
                    st.success("分析が完了しました！結果を確認してください。")
                    
                # 分析結果の表示（分析完了時のみ表示）
                if 'analysis_completed' in st.session_state and st.session_state['analysis_completed']:
                    st.markdown('<div class="section-title">分析結果</div>', unsafe_allow_html=True)
                    
                    tabs = st.tabs(["概要", "詳細", "グラフ", "ダウンロード"])
                    
                    with tabs[0]:  # 概要タブ
                        st.markdown('<div style="font-weight:bold;margin-bottom:1em;font-size:1.1em;">Causal Impact分析の結果概要</div>', unsafe_allow_html=True)
                        
                        # ダミーの結果テーブル
                        summary_data = {
                            "指標": ["平均値", "合計値", "相対効果", "統計的有意性"],
                            "実測値": ["120.3", "2,406.0", "-", "-"],
                            "予測値（介入なし）": ["100.5", "2,010.0", "-", "-"],
                            "効果": ["19.8", "396.0", "19.7%", "99.9%"]
                        }
                        summary_df = pd.DataFrame(summary_data)
                        st.table(summary_df)
                        
                        st.markdown("""
<div style="background:#f0f4f8;border-radius:10px;padding:1.5em;margin-top:1.5em;line-height:1.7;">
<div style="font-weight:bold;margin-bottom:0.7em;font-size:1.1em;">分析結果の解釈</div>
<p>介入期間において、処置群の実測値は<b>平均120.3</b>でした。介入がなかった場合は<b>平均100.5</b>と予測されています（95%信頼区間: 95.2-105.8）。</p>
<p>これにより、介入による効果は<b>平均19.8</b>（95%信頼区間: 14.5-25.1）、率にして<b>19.7%</b>の上昇と推定されます。</p>
<p>この効果は<b>統計的に有意</b>であり（確率: 99.9%）、介入が実際に正の効果をもたらしたと結論づけられます。</p>
</div>
                        """, unsafe_allow_html=True)
                    
                    with tabs[1]:  # 詳細タブ
                        st.markdown('<div style="font-weight:bold;margin-bottom:1em;font-size:1.1em;">分析の詳細情報</div>', unsafe_allow_html=True)
                        
                        # ダミーの詳細データテーブル
                        detail_data = pd.DataFrame({
                            "日付": pd.date_range(start=params['post_period'][0], end=params['post_period'][1]),
                            "実測値": np.random.normal(120, 10, (params['post_period'][1] - params['post_period'][0]).days + 1),
                            "予測値": np.random.normal(100, 5, (params['post_period'][1] - params['post_period'][0]).days + 1),
                            "95%信頼下限": np.random.normal(95, 3, (params['post_period'][1] - params['post_period'][0]).days + 1),
                            "95%信頼上限": np.random.normal(105, 3, (params['post_period'][1] - params['post_period'][0]).days + 1),
                            "効果": np.random.normal(20, 5, (params['post_period'][1] - params['post_period'][0]).days + 1)
                        })
                        detail_data["日付"] = detail_data["日付"].dt.strftime('%Y-%m-%d')
                        st.dataframe(detail_data, use_container_width=True)
                    
                    with tabs[2]:  # グラフタブ
                        st.markdown('<div style="font-weight:bold;margin-bottom:1em;font-size:1.1em;">分析結果のグラフ</div>', unsafe_allow_html=True)
                        
                        # ダミーのグラフ（実際にはCausal Impactの分析結果からグラフを生成）
                        fig = go.Figure()
                        
                        # データ準備（ダミー）
                        date_range = pd.date_range(start=params['pre_period'][0], end=params['post_period'][1])
                        actual = np.concatenate([
                            np.random.normal(100, 5, (params['pre_period'][1] - params['pre_period'][0]).days + 1), 
                            np.random.normal(120, 10, (params['post_period'][1] - params['post_period'][0]).days + 1)
                        ])
                        predicted = np.concatenate([
                            np.random.normal(100, 3, (params['pre_period'][1] - params['pre_period'][0]).days + 1), 
                            np.random.normal(100, 5, (params['post_period'][1] - params['post_period'][0]).days + 1)
                        ])
                        
                        # 上側と下側の信頼区間
                        upper_ci = predicted + 10
                        lower_ci = predicted - 10
                        
                        # プロットの準備
                        intervention_date = params['post_period'][0]
                        intervention_idx = (intervention_date - params['pre_period'][0]).days
                        
                        # プロット作成
                        fig.add_trace(go.Scatter(
                            x=date_range, 
                            y=actual, 
                            mode='lines', 
                            name='実測値',
                            line=dict(color='blue', width=2)
                        ))
                        
                        fig.add_trace(go.Scatter(
                            x=date_range, 
                            y=predicted, 
                            mode='lines', 
                            name='予測値（介入なし）',
                            line=dict(color='red', width=2, dash='dash')
                        ))
                        
                        # 信頼区間
                        fig.add_trace(go.Scatter(
                            x=date_range, 
                            y=upper_ci, 
                            mode='lines', 
                            line=dict(width=0),
                            showlegend=False
                        ))
                        
                        fig.add_trace(go.Scatter(
                            x=date_range, 
                            y=lower_ci, 
                            mode='lines', 
                            line=dict(width=0),
                            fillcolor='rgba(255, 0, 0, 0.1)',
                            fill='tonexty',
                            showlegend=False
                        ))
                        
                        # 介入日の縦線
                        fig.add_vline(x=intervention_date, line_width=2, line_dash="dash", line_color="green")
                        
                        # レイアウト設定
                        fig.update_layout(
                            title='Causal Impact分析結果',
                            xaxis_title='日付',
                            yaxis_title='値',
                            legend=dict(y=0.99, x=0.01),
                            margin=dict(l=40, r=40, t=40, b=40),
                            hovermode='closest',
                            plot_bgcolor='white'
                        )
                        
                        # グリッド線の追加
                        fig.update_xaxes(showgrid=True, gridwidth=1, gridcolor='lightgray')
                        fig.update_yaxes(showgrid=True, gridwidth=1, gridcolor='lightgray')
                        
                        # プロット表示
                        st.plotly_chart(fig, use_container_width=True)
                        
                        # 効果のグラフ
                        effect_fig = go.Figure()
                        
                        # 効果のデータ準備（ダミー）
                        effect = actual - predicted
                        cumulative_effect = np.cumsum(effect)
                        
                        # ポイントワイズ効果のプロット
                        effect_fig.add_trace(go.Scatter(
                            x=date_range, 
                            y=effect, 
                            mode='lines', 
                            name='ポイントワイズ効果',
                            line=dict(color='blue', width=2)
                        ))
                        
                        # 累積効果のプロット
                        effect_fig.add_trace(go.Scatter(
                            x=date_range, 
                            y=cumulative_effect, 
                            mode='lines', 
                            name='累積効果',
                            line=dict(color='green', width=2)
                        ))
                        
                        # 介入日の縦線
                        effect_fig.add_vline(x=intervention_date, line_width=2, line_dash="dash", line_color="red")
                        
                        # ゼロラインの追加
                        effect_fig.add_hline(y=0, line_width=1, line_color="black")
                        
                        # レイアウト設定
                        effect_fig.update_layout(
                            title='介入効果',
                            xaxis_title='日付',
                            yaxis_title='効果の大きさ',
                            legend=dict(y=0.99, x=0.01),
                            margin=dict(l=40, r=40, t=40, b=40),
                            hovermode='closest',
                            plot_bgcolor='white'
                        )
                        
                        # グリッド線の追加
                        effect_fig.update_xaxes(showgrid=True, gridwidth=1, gridcolor='lightgray')
                        effect_fig.update_yaxes(showgrid=True, gridwidth=1, gridcolor='lightgray')
                        
                        # プロット表示
                        st.plotly_chart(effect_fig, use_container_width=True)
                    
                    with tabs[3]:  # ダウンロードタブ
                        st.markdown('<div style="font-weight:bold;margin-bottom:1em;font-size:1.1em;">分析結果のダウンロード</div>', unsafe_allow_html=True)
                        
                        col1, col2 = st.columns(2)
                        with col1:
                            st.markdown("""
<div style="background:#f5f5f5;border-radius:10px;padding:1.2em;text-align:center;">
<div style="font-weight:bold;margin-bottom:0.5em;">分析結果CSV</div>
<div style="font-size:0.9em;color:#666;margin-bottom:1em;">日別の分析結果データをCSV形式でダウンロードできます</div>
<button style="background-color:#1976d2;color:white;border:none;padding:10px 15px;border-radius:5px;cursor:pointer;">CSVをダウンロード</button>
</div>
                            """, unsafe_allow_html=True)
                        
                        with col2:
                            st.markdown("""
<div style="background:#f5f5f5;border-radius:10px;padding:1.2em;text-align:center;">
<div style="font-weight:bold;margin-bottom:0.5em;">グラフ画像</div>
<div style="font-size:0.9em;color:#666;margin-bottom:1em;">分析結果のグラフをPNG形式でダウンロードできます</div>
<button style="background-color:#1976d2;color:white;border:none;padding:10px 15px;border-radius:5px;cursor:pointer;">画像をダウンロード</button>
</div>
                            """, unsafe_allow_html=True)
                    
                    st.markdown("""
<div style="background:#e8f5e9;border-radius:10px;padding:1em;margin-top:2em;margin-bottom:1em;">
<div style="display:flex;align-items:center;">
<span style="font-size:1.6em;margin-right:0.5em;">✓</span>
<span style="color:#2e7d32;font-weight:bold;font-size:1.2em;">分析が完了しました。タブを切り替えて、結果の詳細を確認してください。</span>
</div>
</div>
                    """, unsafe_allow_html=True)

else:
    st.info("処置群・対照群のCSVファイルを選択し、「データを読み込む」ボタンを押してください。") 